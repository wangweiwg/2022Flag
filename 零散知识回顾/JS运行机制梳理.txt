来源：https://segmentfault.com/a/1190000012925872
目标：对浏览器多进程、JS单线程、JS事件循环机制有一定了解，有一个知识体系

*进程是CPU分配资源的最小单位（是能拥有资源和独立运行的最小单位）
*线程是CPU调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）
*不同进程之间也可以通信，不过代价很大
*单线程和多线程是指的在一个进程中的单和多

浏览器：
*浏览器是多进程的
*每打开一个tab相当于创建了一个浏览器进程

浏览器内核（渲染进程）
*多线程的
*页面的渲染、JS执行、事件的循环都是在这个进程中执行

主要包含线程有：
1、GUI渲染线程
2、JS引擎线程
3、事件触发线程
4、定时器出发线程
5、异步http请求线程

GUI渲染线程与JS引擎线程互斥：
由于JavaScript是可操纵DOM的，如果在修改这些元素属性同时渲染界面（即JS线程和UI线程同时运行），那么渲染线程前后获得的元素数据就可能不一致了。
因此为了防止渲染出现不可预期的结果，浏览器设置GUI渲染线程与JS引擎为互斥的关系，当JS引擎执行时GUI线程会被挂起，GUI更新则会被保存在一个队列中等到JS引擎线程空闲时立即被执行。

JS阻塞页面加载：
从上述的互斥关系，可以推导出，JS如果执行时间过长就会阻塞页面。

WebWorker，JS的多线程?
HTML5中支持了Web Worker。Web Worker 为Web内容在后台线程中运行脚本提供了一个简单的方法。线程可以执行任务而不干扰用户界面。
一个worker是使用一个构造函数创建的一个对象(e.g. Worker()) 运行一个命名的JavaScript文件 
这个文件包含将在工作线程中运行的代码; workers 运行在另一个全局上下文中,不同于当前的window
因此，使用 window快捷方式获取当前全局的范围 (而不是self) 在一个 Worker 内将返回错误