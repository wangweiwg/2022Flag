解决的问题：提高编码、测试、维护阶段的生产效率

前端工程化基础：

前后端分离


使用webpack实现项目构建：构建，简单的来说就是编译，前端开发的所有文件最终归属是要交给浏览器去解析、渲染。
并将页面呈现给用户，构建就是将前端开发中的所有源代码转化为宿主浏览器可以执行的代码。前端构建产出的资源文件
只有三种，HTML、CSS、JS文件。需要完成编译的内容：

* 无法被浏览器直接识别的JS代码，包括ES6/7/8/9/10等符合ECMAScript规范的JS代码；
* 无法被浏览器直接识别的CSS代码，包括SASS/LESS等预编译的CSS语法；
* 无法被浏览器识别的HTML模板代码，包括jade、ejs、artTemplate、mustache等Node.js模板引擎；

项目构建其实是为了弥补浏览器自身的缺陷和不足，是一种面向语言的编译过程。那么，除了针对语言本身之外，
前端的构建还应该考虑到Web应用的性能优化。这些优化主要是为了减少HTTP请求，提升用户体验。